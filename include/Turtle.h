#ifndef TURTLE_H_
#define TURTLE_H_

#include <string>
#include <vector>
#include <ngl/Vec4.h>
#include <ngl/Transformation.h>
#include "TreeData.h"
#include "TurtleParameters.h"

///@file Turtle.h
/// @brief My turtle class will interpret the result of an L-System string iteration
///  based on it's dictionary/alphabet




class Turtle
{
private:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m-angle
    //----------------------------------------------------------------------------------------------------------------------
    float m_angle;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_step
    //----------------------------------------------------------------------------------------------------------------------
    float m_step;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_start_x
    //----------------------------------------------------------------------------------------------------------------------
    float m_start_x;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_start_y
    //----------------------------------------------------------------------------------------------------------------------
    float m_start_y;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_start_z
    //----------------------------------------------------------------------------------------------------------------------
    float m_start_z;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_constants
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_constants;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_variables
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_variables;

protected:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_lSys
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_lSys;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_iteration
    //----------------------------------------------------------------------------------------------------------------------
    unsigned m_iteration;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief m_dictSymbols
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_dictSymbols;

public:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief default constructor
    //----------------------------------------------------------------------------------------------------------------------
    Turtle();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief copy constructor taking an instance of the TurtleParameters Stuct
    /// @param _p TurtleParameters
    //----------------------------------------------------------------------------------------------------------------------
    Turtle(TurtleParameters _p);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief Default deconstructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Turtle(){std::cout<<"deconstructor called\n";}

    //Accessors
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access iteration method
    //----------------------------------------------------------------------------------------------------------------------
    float getIteration();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access angle in radians method
    //----------------------------------------------------------------------------------------------------------------------
    float getAngleInRad();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access angle in degree method
    //----------------------------------------------------------------------------------------------------------------------
    float getAngleInDeg();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access drawStep method
    //----------------------------------------------------------------------------------------------------------------------
    float getdrawStep();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access StartX method
    //----------------------------------------------------------------------------------------------------------------------
    float getStartX();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access StartY method
    //----------------------------------------------------------------------------------------------------------------------
    float getStartY();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief access StartZ method
    //----------------------------------------------------------------------------------------------------------------------
    float getStartZ();

    //Mutators

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief set iteration parameter method
    ///@param int iteration parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setIteration(int);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to set AngleInRad parameter value
    /// @param float angle in radians value
    //----------------------------------------------------------------------------------------------------------------------
    void setAngleInRad(float);
    //---------------------------------------------------------------------------------------------------------------------
    ///@brief method to set AngleInDed parameter value
    ///@param float angle in degree parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setAngleInDeg(float);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to set drawStep parameter value
    /// @param float drawStep parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setdrawStep(float);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to set setStartX parameter value
    ///@param float parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setStartX(float);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to set setStartY parameter value
    ///@param float parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setStartY(float);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to set setStartX parameter value
    ///@param float parameter value
    //----------------------------------------------------------------------------------------------------------------------
    void setStartZ(float);



    //----------------------------------------------------------------------------------------------------------------------
    ///@brief actual method that interprets the l-sys string that corresponds to the iteration specified,
    ///  will return a TreeData structure so that it can be passed to OGL
    /// @param _radius float value of the initial cylinder radius
    /// @param _divisions float value of the cylinder divisions
    //----------------------------------------------------------------------------------------------------------------------
    TreeData interpret(float _radius, int _divisions);


};
#endif // TURTLE_H_
