#ifndef NGLWIDGET_H_
#define NGLWIDGET_H_

#include <ngl/Camera.h>
#include <ngl/Vec3.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <MatrixStack.h>
#include <memory>

#include <QOpenGLWidget>
#include <QEvent>
#include <QResizeEvent>
#include <QGLWidget>
#include <QKeyEvent>
#include <QWheelEvent>
#include <QMouseEvent>

#include "LSysStruct.h"
#include "LSysStructForFile.h"
#include "LSysExtFactory.h"
#include "Turtle.h"
#include "TurtleParameters.h"
#include "LSys.h"
#include "LSys0L.h"
#include "LSys1L.h"
#include "LSys2L.h"
#include "LSysParser.h"
#include "TreeData.h"
#include "WindowParams.h"
#include "ObjectExporter.h"


///@file NGLWidget.h
///@brief GLWidget class derived from qt's QGLWidget class
///
///
class NGLWidget : public QOpenGLWidget
{
    Q_OBJECT
public:
    //constructor and deconstructor
    NGLWidget(QWidget *_parent);
    ~NGLWidget();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief toggles wireframe
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWireframe();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  draws the text info in the top left corner of the screen
    //----------------------------------------------------------------------------------------------------------------------
    void drawMeshinfo();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief sets the mesh to tree
    //----------------------------------------------------------------------------------------------------------------------
    void setMesh(TreeData tree);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief gets LSysStruct params
    //----------------------------------------------------------------------------------------------------------------------
    LSysStructForFile getLSysStructForFile();



protected:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to initialize opengl context
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief resize routine
    //----------------------------------------------------------------------------------------------------------------------

    void resizeGL(const int _w, const int _y);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief drawing routine
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL();

    //----------------------------------------------------------------------------------------------------------------------
    ///@brief instance of matrix stack class used for transformations
    //----------------------------------------------------------------------------------------------------------------------
    MatrixStack m_mstack;

private:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to load matrices onto used shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the windows params such as mouse and rotations etc
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera m_cam;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the current set of data, the current mesh
    //----------------------------------------------------------------------------------------------------------------------
    TreeData m_currentTree;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the LSYS type//needs implementation
    //----------------------------------------------------------------------------------------------------------------------
    int m_lstype;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the developed LSystem
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_developedlSys;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the method to build the actual VAO
    //----------------------------------------------------------------------------------------------------------------------
    void constructVAO();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Lsystem's results
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<std::string> m_results;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the set of data, the mesh
    //----------------------------------------------------------------------------------------------------------------------
    TreeData m_tree;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief radius of the cylinder
    //----------------------------------------------------------------------------------------------------------------------
    double m_drawRadius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief unique pointer of type NGL::AbstractVAO to draw the mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::AbstractVAO> m_treeVao;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for wireframe toggle
    //----------------------------------------------------------------------------------------------------------------------
    bool m_wireframe = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for vertex count toggle
    //----------------------------------------------------------------------------------------------------------------------
    bool m_meshinfo = true;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer of ngl::Text to render vertices count text
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text> m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the LSystem's parameters data structure instance
    //----------------------------------------------------------------------------------------------------------------------
    LSysStruct m_lParameters;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the LSystem's parameters data structure instance for UI
    //----------------------------------------------------------------------------------------------------------------------
    LSysStructForFile m_uiParameters;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief text file chosen by user
    //----------------------------------------------------------------------------------------------------------------------
    QString m_txt_file;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief integer for geometry divisions
    //----------------------------------------------------------------------------------------------------------------------
    int m_divisions;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enum for built system
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_builtLSys;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for instant changes mode
    //----------------------------------------------------------------------------------------------------------------------
    bool m_instantChanges = false;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a flag used when calling export for the LSystem parameters
    //----------------------------------------------------------------------------------------------------------------------
    const char* m_exportLSystemParameters;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a flag used when calling export for the LSystem results
    //----------------------------------------------------------------------------------------------------------------------
    const char* m_exportLSystemResults;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a flag to tell if the radius has been changed from the slider
    //----------------------------------------------------------------------------------------------------------------------
    bool m_radiusChanged;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a flag to tell if the divisions has been changed from the UI
    //----------------------------------------------------------------------------------------------------------------------
    bool m_divisionsChanged;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);

public slots:
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to toggle verteces count text
    /// @param _mode boolean flag
    //----------------------------------------------------------------------------------------------------------------------
    void toggleMeshinfo(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to toggle wireframe mesh
    /// @param _mode boolean flag
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWireframe(bool _mode	 );
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to export the mesh as a .obj file
    //----------------------------------------------------------------------------------------------------------------------
    void exportObj();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to toggle instant changes mode
    /// @param _mode boolean flag
    //----------------------------------------------------------------------------------------------------------------------
    void toggleInstantChanges(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to get input file
    //----------------------------------------------------------------------------------------------------------------------
    void getFile();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to draw the LSystem
    //----------------------------------------------------------------------------------------------------------------------
    void drawLSystem();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to parse LSystem parameters from a file
    /// @param file_name the name of the file
    //----------------------------------------------------------------------------------------------------------------------
    void parseLSystemFromFile(QString _file_name);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to parse LSystem parameters from user interface
    //----------------------------------------------------------------------------------------------------------------------
    void parseLSystemFromUI();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to instantiate the final S2L LSystem class
    //----------------------------------------------------------------------------------------------------------------------
    void constructLSystem();
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to change the angle parameter value
    /// @param angle the angle parameter
    //----------------------------------------------------------------------------------------------------------------------
    void changeAngle(int angle);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to change the scale/draw lenght parameter value
    /// @param scale the scale parameter
    //----------------------------------------------------------------------------------------------------------------------
    void changeScale(double scale);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to change the radius parameter value
    /// @param rad the radius parameter
    //----------------------------------------------------------------------------------------------------------------------
    void changeRadius(int rad);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to change the subdivisions of the mesh geometry
    /// @param detail the detail paramter
    //----------------------------------------------------------------------------------------------------------------------
    void changeDetail(int detail);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to change the iterations parameter value
    ///@param iters the iterations parameter
    //----------------------------------------------------------------------------------------------------------------------
    void changeIterations(int iters);
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief method to export LSystem parameters to a file
    //----------------------------------------------------------------------------------------------------------------------
    void exportLSystemParameters();
    //----------------------------------------------------------------------------------------------------------------------
    ///brief method to export LSystem Results (final iterations) to a file
    //----------------------------------------------------------------------------------------------------------------------
    void exportLSystemResult();

};
#endif //NGLWIDGET_H_
